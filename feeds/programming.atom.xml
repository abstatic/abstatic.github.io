<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Coding Mantis</title><link href="http://abstatic.github.io/" rel="alternate"></link><link href="http://abstatic.github.io/feeds/programming.atom.xml" rel="self"></link><id>http://abstatic.github.io/</id><updated>2014-03-06T11:52:00+05:30</updated><entry><title>BitWise Operators</title><link href="http://abstatic.github.io/bitwise-operators.html" rel="alternate"></link><updated>2014-03-06T11:52:00+05:30</updated><author><name>Abhishek Shrivastava</name></author><id>tag:abstatic.github.io,2014-03-06:bitwise-operators.html</id><summary type="html">&lt;p&gt;Let&amp;#8217;s talk about bitwise operations this time. Broadly defined the bitwise operations are operations which take place at the level of individual bits. Typically the bitwise operations on almost all of the processors are faster than
any of the arithmetic operations like &amp;#8216;+&amp;#8217;, &amp;#8216;-&amp;#8216;, &amp;#8216;*&amp;#8217;,&amp;nbsp;&amp;#8216;/&amp;#8217;    &lt;/p&gt;
&lt;p&gt;The bitwise operators give us the power to manipulate bits, &lt;em&gt;the lowest
level of data representation in any computer&lt;/em&gt;. Bitwise operators can be
used to to speed up your program or to perform neat&amp;nbsp;tricks.  &lt;/p&gt;
&lt;p&gt;There are six bitwise operators, &amp;#8216;|&amp;#8217;, &amp;#8216;&amp;amp;&amp;#8217;, &amp;#8216;^&amp;#8217;, &amp;#8216;~&amp;#8217;, &amp;#8216;&amp;lt;&amp;lt;&amp;#8217;,&amp;nbsp;&amp;#8216;&amp;gt;&amp;gt;&amp;#8217;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. &amp;#8216;|&amp;#8217; Operator:&lt;/strong&gt; The &amp;#8216;|&amp;#8217; denotes the bitwise &amp;#8220;or&amp;#8221; operator. This is
operator or&amp;#8217;s all the individual bits of any two digits. It works same
like the logical &lt;span class="caps"&gt;OR&lt;/span&gt; || &amp;nbsp;operator.  &lt;/p&gt;
&lt;p&gt;The truth table is as&amp;nbsp;follows:-  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; Bit A   Bit B   Result A | B
  ------- ------- --------------
  0       1       1
  1       0       1
  1       1       1
  0       0       0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So you can see that the truth table is same as of logical ||&amp;nbsp;.  &lt;/p&gt;
&lt;p&gt;Now lets get to the fun part. We will find the | value of two&amp;nbsp;integers.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Int    A    =   6 = 0110  
Int    B    =   9 = 1001  
So,   A|B   = 6|9 = 1111 = 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The answer makes perfect&amp;nbsp;sense.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&amp;#8217;&amp;amp;&amp;#8217; Operator:&lt;/strong&gt;&amp;#8216;&amp;amp;&amp;#8217; is the bitwise &amp;#8216;and &amp;#8216; operator again it works the
same as the logical &lt;span class="caps"&gt;AND&lt;/span&gt; operator but this one works on the bit sequence
of two given bits. The truth table is given&amp;nbsp;below:-  &lt;/p&gt;
&lt;table border="1"&gt;
        &lt;tbody&gt;
                &lt;tr&gt;
                        &lt;th&gt;Bit A&lt;/th&gt;
                        &lt;th&gt;Bit B&lt;/th&gt;
                        &lt;th&gt;Result A &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; B&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                &lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Okay, now once again let&amp;#8217;s take a example with the slightly different&amp;nbsp;digits.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Int    A    =   7      = 0111  
Int    B    =   9      = 1001  
So,    A&amp;amp;B  = 7&amp;amp;9      = 0001 = 1  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again the answer makes perfect&amp;nbsp;sense.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. &amp;#8216;^&amp;#8217; Operator:&lt;/strong&gt; &amp;#8216;^&amp;#8217; is the bitwise &amp;#8216;eXclusive &lt;span class="caps"&gt;OR&lt;/span&gt;&amp;#8217; &lt;span class="caps"&gt;XOR&lt;/span&gt; operator.
This is a slightly different operator. Here when we have an exact &amp;#8216;or&amp;#8217;
condition then only then the operator returns true, i.e. 0 ^ 1 will
return 1 but 1 ^ 1 will not return 1. It will return&amp;nbsp;0.  &lt;/p&gt;
&lt;p&gt;The truth table is as&amp;nbsp;follows:   &lt;/p&gt;
&lt;table border="1"&gt;
        &lt;tbody&gt;
                &lt;tr&gt;
                        &lt;th&gt;Bit A&lt;/th&gt;
                        &lt;th&gt;Bit B&lt;/th&gt;
                        &lt;th&gt;Result A \^ B&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                &lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Okay, now once again let&amp;#8217;s take a example with the slightly different&amp;nbsp;digits.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Int    A    =   7    = 0111  
Int    B    =   9    = 1001  
So,    A^B  = 7^9    = 1110  = 14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4. &amp;#8216;~&amp;#8217; Operator:&lt;/strong&gt; &amp;#8216;~&amp;#8217; or &amp;#8216;Tilde&amp;#8217; is the bitwise unary operator which
operates only on a single bit. This operator perform the bit flipping,
i.e. it forms the ones&amp;#8217; complement of a given bit sequence. In laymans&amp;#8217;
terms thie operator turns 0&amp;#8217;s to 1&amp;#8217;s and 1&amp;#8217;s to&amp;nbsp;0&amp;#8217;s  &lt;/p&gt;
&lt;p&gt;The truth table is relatively&amp;nbsp;simple  &lt;/p&gt;
&lt;table border="1"&gt;
        &lt;tbody&gt;
                &lt;tr&gt;
                        &lt;th&gt;Bit A&lt;/th&gt;
                        &lt;th&gt;Result ~A&lt;/th&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;0&lt;/td&gt;
                        &lt;td&gt;1&lt;/td&gt;
                &lt;/tr&gt;
                &lt;tr&gt;
                        &lt;td&gt;1&lt;/td&gt;
                        &lt;td&gt;0&lt;/td&gt;
                &lt;/tr&gt;
        &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let&amp;#8217;s take an example to understand the ones&amp;#8217; complement&amp;nbsp;clearly.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Int    A    =   7    = 0111  

So,   ~A    =  ~7    = 1000  = 8  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;5. &amp;#8216;&amp;lt;&amp;lt;&amp;#8217; Operator:&lt;/strong&gt; &amp;#8216;&amp;lt;&amp;lt;&amp;#8217; is the bitwise left shift operator.
Technically, &amp;#8216;&amp;lt;&amp;lt;&amp;#8217; this  is a bit shift operator as it shifts a given
bit sequence to the left. Just like ones&amp;#8217; complement this operator works
on a single bit&amp;nbsp;sequence.  &lt;/p&gt;
&lt;p&gt;The generaly syntax of using &amp;#8216;&amp;lt;&amp;lt;&amp;#8217;&amp;nbsp;is  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;~~~~ {.example}
[variable]&amp;lt;&amp;lt;[number of places]&amp;nbsp;~~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whilst shifting, 0s are added as padding from the&amp;nbsp;right.  &lt;/p&gt;
&lt;p&gt;Example-  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Int    A        =   7         = 0111  

So,   A&amp;lt;&amp;lt;2  =  7&amp;lt;&amp;lt;2    = 11100   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;6. &amp;#8216;&amp;gt;&amp;gt;&amp;#8217; Operator:&lt;/strong&gt;&amp;#8216;&amp;gt;&amp;gt;&amp;#8217; is the bitwise right shift operator. Works
same as the left shift operator. But it shifts all the bits to the&amp;nbsp;right.&lt;/p&gt;</summary><category term="Bitwise"></category><category term="binary"></category><category term="computer"></category></entry><entry><title>Python</title><link href="http://abstatic.github.io/python.html" rel="alternate"></link><updated>2013-09-06T14:13:00+05:30</updated><author><name>Abhishek Shrivastava</name></author><id>tag:abstatic.github.io,2013-09-06:python.html</id><summary type="html">&lt;p&gt;Today I programmed for the first time in python and believe me when I
say it felt better than an orgasm&amp;nbsp;!!&lt;/p&gt;
&lt;p&gt;I mean you dont need to declare variables , to heck with data types and
even curly braces , just indent your&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;And the best thing is the language is interpreted which means I can
check all the one liner statements in a single carriage return. In fact
you dont even need to add the semi&amp;nbsp;colons.&lt;/p&gt;
&lt;p&gt;And swapping is like mother of god ! , just a,b = b,a &lt;br /&gt;
Shit. Super excited about learning this language&amp;nbsp;!  &lt;/p&gt;</summary><category term="computers"></category></entry><entry><title>Finally , I make mario !!</title><link href="http://abstatic.github.io/finally-i-make-mario.html" rel="alternate"></link><updated>2013-07-02T21:13:00+05:30</updated><author><name>Abhishek Shrivastava (noreply@blogger.com)</name></author><id>tag:abstatic.github.io,2013-07-02:finally-i-make-mario.html</id><summary type="html">&lt;h2&gt;The Source Code&amp;nbsp;Explained&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-Gc5sqv8qGtE/UdNAj-UMsrI/AAAAAAAAA0Y/j9SZeqf1rOw/s310/pyramid_thumb+(1).png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-Gc5sqv8qGtE/UdNAj-UMsrI/AAAAAAAAA0Y/j9SZeqf1rOw/s310/pyramid_thumb+(1" /&gt;.png)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After slogging for nearly a week , just right now I finally solved mario
, from pset1. The problem consisted of printing out half-pyramids of a
specific height, provided by the user. The output of the problem had to
look something like this:-
&lt;pre&gt;
Height: 8&lt;br /&gt;
        ##
       ###
      ####
     #####
    ######
   #######
  ########
 #########
&lt;/pre&gt;
Now take a look at source code , here:-&lt;br /&gt;
&lt;em&gt;Warning:- This is a spoiler for other people still trying on&amp;nbsp;mario.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cs50.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;  &lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="c1"&gt;//Getting User Input-  &lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

    &lt;span class="k"&gt;do&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Height: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetInt&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;  

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  

        &lt;span class="c1"&gt;//print spaces  &lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="p"&gt;{&lt;/span&gt;  
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//print hashes  &lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="p"&gt;}&lt;/span&gt;  

        &lt;span class="c1"&gt;//print new_line  &lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;For loop has finished printing !! &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;First Block , Getting User Input&amp;nbsp;:-&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;div
style="background-color: black; border-radius: 0px; color: lime; display: inline-block; font-family: Courier; font-size: 15px; padding-bottom: 10px; padding-left: 10px; padding-right: 10px; padding-top: 10px; width: 386px;"&gt;&lt;/p&gt;
&lt;p&gt;int height;&lt;br /&gt;
&lt;br /&gt;
   do&lt;br /&gt;
   {&lt;br /&gt;
     printf(&amp;#8220;Height: &amp;#8220;);&lt;br /&gt;
     height = GetInt();&lt;br /&gt;
   }&lt;br /&gt;
   while( (height \&amp;lt;= 1) || (height &gt; 23)&lt;br /&gt;&amp;nbsp;);&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The first block of code consists of the &lt;span class="caps"&gt;DO&lt;/span&gt;-&lt;span class="caps"&gt;WHILE&lt;/span&gt; loop , which prompts
for user input. The loop will not exit until the user enters a number
between 2 and&amp;nbsp;23.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;The main block , generating half-pyramid&amp;nbsp;:-&lt;/span&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;div
style="background-color: black; border-radius: 0px; color: lime; display: inline-block; font-family: Courier; font-size: 15px; padding-bottom: 10px; padding-left: 10px; padding-right: 10px; padding-top: 10px; width: 376px;"&gt;&lt;/p&gt;
&lt;p&gt;for(int i = 1; i \&amp;lt;= height; i++)&lt;br /&gt;
   {&lt;br /&gt;
&lt;br /&gt;
        //print spaces&lt;br /&gt;
        for(int s = height-i ;s &gt; 0; s&amp;#8212;)&lt;br /&gt;
        {&lt;br /&gt;
            printf(&amp;#8221; &amp;#8220;);&lt;br /&gt;
       &amp;nbsp;}  &lt;/p&gt;
&lt;p&gt;//print hashes&lt;br /&gt;
        for(int j = 0;j \&amp;lt;= i; j++)&lt;br /&gt;
        {&lt;br /&gt;
            printf(&amp;#8220;#&amp;#8221;);&lt;br /&gt;
&lt;br /&gt;
        }&lt;br /&gt;
&lt;br /&gt;
        //print new_line&lt;br /&gt;
        printf(&amp;#8220;\n&amp;#8221;);&lt;br /&gt;
&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;}  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The algorithm I used to generate the half pyramid was as follows&amp;nbsp;:-   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A for loop for automating the generation of each&amp;nbsp;line.&lt;/li&gt;
&lt;li&gt;A for loop for generating spaces in each&amp;nbsp;line.&lt;/li&gt;
&lt;li&gt;A for loop for generating hashes in each&amp;nbsp;line.&lt;/li&gt;
&lt;li&gt;Printing new line after the spaces and sharps have been&amp;nbsp;printed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the first for loops repeats itself for the height specified , which
means it will generate the pattern for each line. I have also used the
iterator &amp;#8220;i&amp;#8221; as a reference to line number, that&amp;#8217;s why &amp;#8216;i&amp;#8217; has been
initialized  as&amp;nbsp;1.  &lt;/p&gt;
&lt;p&gt;The second for loop is used to print spaces. The logic used here is&amp;nbsp;-&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: black; padding: 5px; color: white"&gt;&lt;code&gt;Number
 of spaces in each line = height specified - number of line
 //Decrementing by one in each line&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now basically, the loop will repeat itself on the same line again and
again , thereby printing spaces as it&amp;nbsp;completes.  &lt;/p&gt;
&lt;p&gt;The third for loop is used to print sharps.The logic used here is&amp;nbsp;-&lt;/p&gt;
&lt;p&gt;&lt;span style="background-color: black; padding: 5px; color: white"&gt;&lt;code&gt;Number
of hashes in each line = two at first line , increment by one with each line&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;After printing out hashes we need to have a new line , before our main
for loop repeats again and to do that we use &amp;#8220;\n&amp;nbsp;&amp;#8221;  &lt;/p&gt;
&lt;p&gt;And folks that&amp;#8217;s mario for you. Make sure your main&amp;nbsp;returns.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;span class="caps"&gt;PS&lt;/span&gt; :-&lt;/em&gt;* If you are following the hacker edition pset then after the
for loop printing first set of sharps you will need to add a tab space
by printing out \t &lt;/strong&gt; character. And then repeat the for loop for
printing the hashes exactly as it&amp;nbsp;was.&lt;/p&gt;</summary><category term="MyLife"></category></entry><entry><title>CS50: Week 1 , Fall 2012</title><link href="http://abstatic.github.io/cs50-week-1-fall-2012.html" rel="alternate"></link><updated>2013-06-30T15:22:00+05:30</updated><author><name>Abhishek Shrivastava (noreply@blogger.com)</name></author><id>tag:abstatic.github.io,2013-06-30:cs50-week-1-fall-2012.html</id><summary type="html">&lt;h2&gt;My Experience (Till&amp;nbsp;now)&lt;/h2&gt;
&lt;div style="font-family: Helvetica;"&gt;
&lt;span class="caps"&gt;CS50&lt;/span&gt; is Harvard&amp;#8217;s most famous course and the institutes first course to
be featured in edX. There are literally no pre-requisites other than a
computer and a working net connection.It&amp;#8217;s specifically targets people
who are new to the field of computer science.

After completing Week0 , I am battling pset1 now , which is about
generating half-pyramids, just like in mario.

&lt;/div&gt;

&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-kXp5sk8Daig/UdBCD5xs1hI/AAAAAAAAA0I/M1UIfimfDH0/s310/pyramid_thumb+(1).png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-kXp5sk8Daig/UdBCD5xs1hI/AAAAAAAAA0I/M1UIfimfDH0/s310/pyramid_thumb+(1" /&gt;.png)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But we&amp;#8217;ve got to use hashes and the output will ask for pyramid height
and it has to look something like this&amp;nbsp;-&lt;/p&gt;
&lt;p&gt;&lt;div
style="color: white; background-color: black; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; border-top-left-radius: 0px; border-top-right-radius: 0px; display: inline-block; font-family: Courier; margin: auto; padding: 10px;"&gt;&lt;/p&gt;
&lt;p&gt;Height: 8&lt;br /&gt;
       ##&lt;br /&gt;
      ###&lt;br /&gt;
     ####&lt;br /&gt;
    #####&lt;br /&gt;
   ######&lt;br /&gt;
  #######&lt;br /&gt;
 ########&lt;br /&gt;&amp;nbsp;#########&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Even though it seems like a child&amp;#8217;s play , believe me its not (Edit: For beginners), atleast
not for beginners like me! , the main problem is/are the loops and
nesting , and after that you also need to find a logic b/w the no. of
spaces , sharps and new&amp;nbsp;lines.&lt;/p&gt;
&lt;p&gt;Dunno how am I supposed to solve it ?! ,but anyway I&amp;#8217;ll keep on
trying&amp;#8230;thinking to pull off an all nighter now&amp;nbsp;:P&lt;/p&gt;
&lt;div style="font-family: Helvetica;"&gt;

&lt;span class="caps"&gt;BTW&lt;/span&gt; the lectures , shorts and sections are just superb ! They take
programming to just another level.Trust me if you are interested in &lt;span class="caps"&gt;CS&lt;/span&gt;
then you definitely need to check out this course , and if you complete
it and submit all the psets on time , then you are also awarded a
certificate , signed by David J. Malan , that too for free. ;)

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;:- There is one more problem in this pset , called &amp;#8220;Greedy&amp;#8221; in which
we have to code a program which returns out minimum change for an amount
of money, but more on that later, gotta code now ;P&amp;nbsp;!&lt;/em&gt;&lt;/p&gt;</summary><category term="computers"></category><category term="MyLife"></category></entry></feed>